import { Injectable } from '@angular/core';
import * as THREE from 'three';

@Injectable({
  providedIn: 'root'
})
export class Gcode {
  generate(layers: THREE.Vector2[][][], layerHeight = 0.2, feedRate = 1500): string {
    let gcode = '';

    // Header
    gcode += '; G-code generated by Angular Slicer\n';
    gcode += 'G21 ; Set units to millimeters\n';
    gcode += 'G90 ; Use absolute positioning\n';
    gcode += 'M82 ; Set extruder to absolute mode\n';
    gcode += 'G28 ; Home all axes\n';
    gcode += 'G1 Z5 F5000 ; Move Z up\n';
    gcode += 'G1 X5 Y5 F5000 ; Move to corner\n';
    gcode += 'M109 S200 ; Set extruder temperature and wait\n';
    gcode += 'G92 E0 ; Reset extruder position\n';
    gcode += 'G1 E10 F200 ; Prime the extruder\n';
    gcode += 'G92 E0 ; Reset extruder position again\n';

    // Layers
    layers.forEach((layer, layerIndex) => {
      const z = (layerIndex + 1) * layerHeight;
      gcode += `; LAYER:${layerIndex}\n`;
      gcode += `G1 Z${z} F${feedRate}\n`;

      layer.forEach(polygon => {
        const startPoint = polygon[0];
        gcode += `G0 X${startPoint.x.toFixed(3)} Y${startPoint.y.toFixed(3)}\n`;

        for (let i = 1; i < polygon.length; i++) {
          const point = polygon[i];
          gcode += `G1 X${point.x.toFixed(3)} Y${point.y.toFixed(3)} E${this.getExtrusion(polygon[i-1], point).toFixed(5)}\n`;
        }
        // Close the polygon
        gcode += `G1 X${startPoint.x.toFixed(3)} Y${startPoint.y.toFixed(3)} E${this.getExtrusion(polygon[polygon.length-1], startPoint).toFixed(5)}\n`;
      });
    });

    // Footer
    gcode += 'M104 S0 ; Turn off extruder temperature\n';
    gcode += 'M140 S0 ; Turn off bed temperature\n';
    gcode += 'G91 ; Use relative positioning\n';
    gcode += 'G1 Z10 F3000 ; Move Z up\n';
    gcode += 'G90 ; Use absolute positioning\n';
    gcode += 'G1 X0 Y200 F3000 ; Present print\n';
    gcode += 'M84 ; Disable motors\n';

    return gcode;
  }

  private getExtrusion(p1: THREE.Vector2, p2: THREE.Vector2, extrusionMultiplier = 0.04): number {
    const distance = p1.distanceTo(p2);
    return distance * extrusionMultiplier;
  }
}